project_name: "AI Usage & Data Policy Web Crawler"
description: "A Python-based solution to crawl organizational websites, detect AI usage, and extract related data usage policies, presenting the findings in a filterable web interface with AI-powered search and shareable, URL-based filters."
version: 5.0

phases:
  - phase: 1. Project Setup
    tasks:
      - task: Initialize Project Structure
        description: "Create directories for source code, tests, data, and configuration."
        status: To Do # Status can be: To Do, In Progress, Done
      - task: Setup Python Environment
        description: "Create a virtual environment and install dependencies from a requirements file."
        sub_tasks:
          - "Create a virtual environment: `python -m venv venv`."
          - "Create `requirements.txt` file."
          - "Add libraries: `playwright`, `beautifulsoup4`, `pandas`, `streamlit`, `spacy`, `sqlalchemy`, `google-generativeai`, `pytest`, `pytest-mock`."
          - "Install dependencies: `pip install -r requirements.txt`."
          - "Install Playwright browsers: `playwright install`."
          - "Download spaCy model: `python -m spacy download en_core_web_sm`."
        status: To Do # Status can be: To Do, In Progress, Done
      - task: Create Configuration Files
        description: "Set up a configuration file for settings and the input URL list."
        status: To Do # Status can be: To Do, In Progress, Done

  - phase: 2. Web Crawler Module (Playwright)
    # ... (tasks remain the same)
  - phase: 3. Content Analysis Module
    # ... (tasks remain the same)
  - phase: 4. Data Aggregation & Storage
    # ... (tasks remain the same)
  - phase: 5. Frontend Display (Streamlit Multi-Page App)
    # ... (tasks remain the same)
  - phase: 6. Execution & Documentation
    # ... (tasks remain the same)

  - phase: 7. Testing (Pytest)
    tasks:
      - task: Develop Unit Tests for Core Logic
        description: "Create unit tests for individual functions to ensure they work as expected."
        file: "tests/"
        sub_tasks:
          - "Create `tests/` directory."
          - "Write tests for the analyzer module (`test_analyzer.py`) using mock text data as input."
          - "Write tests for the aggregator module (`test_aggregator.py`) using mock analysis JSON data."
        status: To Do # Status can be: To Do, In Progress, Done
      - task: Implement Mocking for External Services
        description: "Use mocking to isolate tests from external dependencies like networks and APIs."
        sub_tasks:
          - "Use `pytest-mock` to simulate the generative AI API call in the 'AI Search' page. This allows testing the frontend logic without making real API calls and incurring costs."
          - "Mock Playwright browser interactions to test the crawler's link-finding and data-extraction logic without actually hitting the network."
        status: To Do # Status can be: To Do, In Progress, Done
      - task: Configure Test Runner
        description: "Ensure tests can be discovered and run easily."
        sub_tasks:
          - "Add a `pytest.ini` file if needed for custom configurations."
          - "Update the README.md with instructions on how to run the test suite."
        status: To Do # Status can be: To Do, In Progress, Done
